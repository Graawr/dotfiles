set from = "logancrossing@gmail.com",V
set realname = "Logan Braga",V
#set imap_check_subscribed,V
#set folder=imaps://logancrossing@imap.gmail.com,V
#set imap_pass=waterloosunset14031996,V
#set imap_user=logancrossing@gmail.com,V
# IMAP Settings,V
#set smtp_pass=waterloosunset14031996,V
#set smtp_url=smtps://$imap_user@smtp.gmail.com,V
# SMTP Settings,V
## ACCOUNT #2,V
source "~/.mutt/braga.logan"folder-hook braga.logan@gmail.com/  'source ~/.mutt/braga.logan'folder-hook braga.logan@gmail.com/Braga.logan 'set realname="Logan Braga"'## ACCOUNT  #3source "~/.mutt/arthurcurryjv"folder-hook arthurcurryjv.com/  'source ~/.mutt/arthurcurryjv'folder-hook arthurcurryjv@gmail.com/arthurcurryjv 'set realname="Arthur Curry"'## ACCOUNT  #4source "~/.mutt/marielleframboise"folder-hook marielleframboise.com/  'source ~/.mutt/marielleframboise'folder-hook marielleframboise@gmail.com/marielleframboise 'set realname="Marielle Montellimard"'## ACCOUNT #1source "~/.mutt/logancrossing"folder-hook logancrossing@gmail.com/ 'source ~/.mutt/logancrossing'folder-hook logancrossing@gmail.com/logancrossing 'set realname="Logan Braga"'macro index,pager <f2> '<sync-mailbox><enter-command>source ~/.mutt/logancrossing<enter><change-folder>!<enter>'macro index,pager <f3> '<sync-mailbox><enter-command>source ~/.mutt/braga.logan<enter><change-folder>!<enter>'macro index,pager <f4> '<sync-mailbox><enter-command>source ~/.mutt/arthurcurryjv<enter><change-folder>!<enter>'macro index,pager <f5> '<sync-mailbox><enter-command>source ~/.mutt/marielleframboise<enter><change-folder>!<enter>',V
vim ugrave key,v
o 80 th character of the line,v
@charset "utf-8";,V
leader,v
        map <leader>G <C-d>        map <leader>g <C-u>,V
@charset "utf-8";,v
            <img src="images/blur-ball.png" data-stellar-ratio="3" data-stellar-vertical-offset="-55"alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1" data-stellar-vertical-offset="-102"alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5" data-stellar-vertical-offset="-53"alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7" data-stellar-vertical-offset="-25"alt="">            <img src="images/blur-ball.png" data-stellar-ratio="3" data-stellar-vertical-offset="-55"alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1" data-stellar-vertical-offset="-102"alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5" data-stellar-vertical-offset="-53"alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7" data-stellar-vertical-offset="-25"alt="">,V
            <img src="images/blur-ball.png" data-stellar-ratio="3"                data-stellar-vertical-offset="-55" alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1"                data-stellar-vertical-offset="-102" alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5"                data-stellar-vertical-offset="-53" alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7"                data-stellar-vertical-offset="-25" alt="">            <img src="images/blur-ball.png" data-stellar-ratio="3"                data-stellar-vertical-offset="-55" alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1"                data-stellar-vertical-offset="-102" alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5"                data-stellar-vertical-offset="-53" alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7"                data-stellar-vertical-offset="-25" alt="">,V
            <img src="images/blur-ball.png" data-stellar-ratio="3"                data-stellar-vertical-offset="-55" alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1" data-stellar-vertical-offset="-102"alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5" data-stellar-vertical-offset="-53"alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7" data-stellar-vertical-offset="-25"alt="">            <img src="images/blur-ball.png" data-stellar-ratio="3" data-stellar-vertical-offset="-55"alt="">            <img src="images/blur-ball-big.png" data-stellar-ratio="1" data-stellar-vertical-offset="-102"alt="">            <img src="images/focus-ball.png" data-stellar-ratio="1.5" data-stellar-vertical-offset="-53"alt="">            <img src="images/small-ball.png" data-stellar-ratio="2.7" data-stellar-vertical-offset="-25"alt="">,V
        <a class="button" data-slide="3" title=""></a>,V
commandheight,v
            set column=0,V
            set column=80,V
        " set colorcolumn=80,V
        " set columns=80,V
    hi ColorColumn             ctermfg=none     ctermbg=7       cterm=bold,V
bold,v
none,v
depending,v
    <meta name="copyright" content="© Logan Braga 2013-2014" />,V
              <!-- JS main scripts -->,v
file:///home/logan/Documents/.start/index.html,v
Since earlier versions do not support this, my .vimrc uses instead:,v
#bfba92,v
vim 80 chars per line,v
a terminal,v
            <!-- Smooth scrolling script -->,v
       <!-- Stellar effect script -->,v
     <!-- Scroll effects library -->,v
        <!-- Jquery base library -->,v
             <!-- Main CSS style -->,v
             ,v
Unlike the “by URI” and “by File Upload” modes, the “Direct Input” mode of the validator provides validated content in the form of characters pasted or typed in the validator's form field. This will automatically make the data UTF-8, and therefore the validator does not need to determine the character encoding of your document, and will ignore any charset information specified.,v
C4BD84,v
*color3: #bfba92,V
*color3: ,V
bfba92,v
 Bonjour, ,v
        , biorderWidth        = myBorderWidth,V
        , borderWidth        = myBorderWidth,V
Par contre attention aux effets étranges à force de l'utiliser. Un deamon viendra à vous et vous verrez plusieurs fois des <dd>, <x> ou encore <p> dans vos textes. :noel: ,v
        elseif (&foldcolumn>=10)            set foldcolumn=0        endif    endfunction    " Toggle numbers/relative numbers    noremap <F11> :call ToggleNumbersType()<CR>    inoremap <F11> <ESC>:call ToggleNumbersType()<CR>a,V
p <,v
nnoremap ,v
endif,v
        autocmd! FileType c                                         set shiftwidth=4 softtabstop=4 tabstop=4 makeprg=make,V
que,v
Oyo!Histoire de concurrencer un peu le sujet sur l'Église d'Emacs, je me porte volontaire pour un petit topic de présentation de vim (et non pas vi, mais il fallait bien faire sensation dans le titre).---------------------------------0. Qu'est-ce que VIM?---------------------------------VIM (vi-improved, descendant de l'antique Vi) est un éditeur de texte modal, initialement en ligne de commande.Un éditeur modal est un éditeur qui fonctionne par modes (uhuhu), c'est-à-dire que les fonctionnalités et commandes habituelles sont séparées en groupes et ne sont utilisables que dans ces groupes (ou leur comportement est modifié dans les autres).,v
        autocmd! FileType vhdl                                      set shiftwidth=2 softtabstop=2 tabstop=2,V
        autocmd! FileType bash                                      set shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%,V
unix,v
        autocmd! FileType zsh                                       set shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%,V
bash,v
        autocmd! FileType sh                                        set shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%,V
        autocmd! FileType asciidoc                                  set nocindent noautoindent,V
autocmd FileType make setlocal noexpandtab,v
imap ! &#33,V
imap >> &raquo;,V
imap << &laquo;,V
imap & &#amp,V
imap % &#37,V
imap # &#35,V
" imap $ &#36,V
" imap " &quot,V
syntax – folds are defined by syntax highlighting ,v
A file type plugin (ftplugin) is a script that is run automatically when Vim detects the type of file when the file is created or opened. The type can be detected from the file name (for example, file sample.c has file type c), or from the file contents. ,v
view folder,v
     Bundle  'dahu/bisectly',V
 dahu / bisectly,V
une,v
            let g:relnum = 1,V
            let g:shownum = 1,V
            let g:shownum = 0,V
            let g:relnum = 0,V
    let g:shownum = 1,V
    let g:relnum = 1,V
    let g:paste_state = 0,V
            echo "Paste Mode Enabled! Most plugins won't work!",V
            echo "Paste Mode Disabled!",V
            let g:paste_state = 0,V
            let g:paste_state = 1,V
    let g:foldcol = 0,V
            let g:foldcol = 0,V
            let g:foldcol = 5,V
            let g:foldcol = 1,V
set,v
    inoremap <F10> <ESC>:call ToggleSpellCheck()<CR>a,V
    " Toggle spellcheck    noremap <F10> :call ToggleSpellCheck()<CR>    inoremap <F10> <ESC>:call ToggleSpellCheck()<CR>a    noremap <leader><F10> :set spelllang=en<CR>    function! ToggleSpellCheck()        if &spell            set nospell        else            set spell        endif    endfunction,V
    " Toggle spellcheck    noremap <F10> :call ToggleSpellCheck()<CR>    inoremap <F10> <ESC>:call ToggleSpellCheck()<CR>a    noremap <leader><F10> :set spelllang=en<CR>    function! ToggleSpellCheck()        if &spell            set nospell        else            set spell        endif    endfunction,V
    noremap <F10> :call ToggleFoldCol()<CR>,V
<leader,v
    " Toggle foldcolumn    nmap <leader>fc :call ToggleFoldCol()<CR>    let g:foldcol = 0    function! ToggleFoldCol()        if (g:foldcol == 0)            let g:foldcol = 1            set foldcolumn=1        elseif (g:foldcol == 1)            let g:foldcol = 5            set foldcolumn=5        else            let g:foldcol = 0            set foldcolumn=0        endif    endfunction,V
            echo 'Overlength highlighting disabled',V
            echo 'Overlength highlighting activated',V
        " set gdefault                                " default to s//g (global),V
            hlqkjsh,V
http://pastebin.com/jqDEUvmf,v
ervandew/supertab,v
tpope/vim-ragtag,v
tpope/vim-endwise,v
honza/vim-snippets,v
tomtom/tlib_vim,v
garbas/vim-snipmate,v
MarcWeber/vim-addon-mw-utils,v
            wdjsdsqjfjfkkk kfhqkfhqkhf q qlhflkqhfklh fqhf hqlkf jhqlkfh q qlkfj,V
        set smartindent                             " see autoindent,V
     Bundle 'clones/vim-cecutil',V
     Bundle 'dahu/bisectly',V
linux,v
     Bundle 'vim-scripts/Auto-Pairs',V
sixth,v
     Bundle 'scrooloose/syntastic'     Bundle 'tpope/vim-abolish'     Bundle 'mileszs/ack.vim'     " Bundle 'clones/vim-cecutil'     Bundle 'Lokaltog/vim-easymotion'     Bundle 'scrooloose/nerdtree'     Bundle 'nathanaelkane/vim-indent-guides'     Bundle 'vim-scripts/loremipsum'     Bundle 'tsaleh/vim-matchit'     Bundle 'fholgado/minibufexpl.vim'     Bundle 'chrisbra/NrrwRgn'     Bundle 'tpope/vim-pastie'     Bundle 'kshenoy/vim-signature'     Bundle 'tpope/vim-speeddating'     Bundle 'tpope/vim-surround'     Bundle 'godlygeek/tabular'     Bundle 'majutsushi/tagbar'     Bundle 'vim-scripts/tComment'     Bundle 'tpope/vim-unimpaired'     Bundle 'vim-scripts/YankRing.vim'     Bundle "MarcWeber/vim-addon-mw-utils"     Bundle "tomtom/tlib_vim"     Bundle "garbas/vim-snipmate"     Bundle "honza/vim-snippets"     Bundle "tpope/vim-endwise"     Bundle "tpope/vim-ragtag"     Bundle "ervandew/supertab"     Bundle 'vim-scripts/Auto-Pairs'     Bundle 'tristen/vim-sparkup'     Bundle 'vim-scripts/SrcExpl'     Bundle 'tpope/vim-repeat'""" END PLUGINS }}}""" OPTIONS {{{    filetype indent plugin on                       " enable ft+plugin detect    set viminfo='100,f1                             " save folds upon exit    " Interface        set nocompatible                            " don't vi-compatible        set noshowmode                              " don't show mode        set cmdheight=1        set nolinebreak        set showbreak=\ ↳\                          " display an arrow in front of wrapped lines        set nopaste                                 " disable paste mode by default        set noexrc                                  " don't use other .*rc(s)        syntax on                                   " syntax highlighting        set t_Co=256                                " 256-colors        colors 16color                              " select colorscheme        set ttymouse=xterm2                         " Currently being tested        set background=dark                         " dark background        set cursorline                              " hilight cursor line        set more                                    " use more as a pager        set number                                  " show line numbers        set relativenumber                          " use line numbers from the current line        set numberwidth=5                           " number of line numbers to show        set scrolloff=5                             " lines above/below cursor        set showcmd                                 " show cmds being typed        set title                                   " set window title        set fillchars+=vert:§                       " vertical splits separator        set laststatus=2                            " always show statusline        set mouse=a                                 " mouse in all modes        set list                                    " Show whitespaces        set listchars=tab:>.,trail:.,extends:#,nbsp:. " Which whitespaces to show        autocmd filetype html,xml set listchars-=tab:>. " disable tabs showing for html        set noerrorbells                            " disable beep        set novisualbell                            " disable flashing    " Statusline        function! SetStatus()            setl statusline+=%1*\ %<%.50f%* " tail of the filename            setl statusline+=%1*%m%*   " modified flag            setl statusline+=%1*%h%*   " help file flag            setl statusline+=%1*%r%*   " read only flag            setl statusline+=\ [%{FileSize()}] " get size of the current file            setl statusline+=%1*%y%*      "filetype            setl statusline+=[%{strlen(&fenc)?&fenc:'none'}%1*,%* "file encoding            setl statusline+=%{&ff}]            setl statusline+=%=      "left/right separator            setl statusline+=%1*[%*ASCII:%1*%03.3b,%*HEX:%1*\%02.2B]\ \ \ \ %*            setl statusline+=%c%1*,%*      "cursor column            setl statusline+=%l%1*/%L\ \ \ %*\    "cursor line/total lines            setl statusline+=%p%%\    "percent through file        endfunction        " Update when switching mode        function! SetStatusInsertMode(mode)            setl statusline=%*            if a:mode == 'i'                if (g:paste_state == 1)                    setl statusline+=%2*\ PASTE\ %3*◤%*                else                    setl statusline+=%2*\ INSERT\ %3*◤%*                endif            elseif a:mode == 'r'                setl statusline+=%2*\ REPLACE\ %3*◤%*            elseif a:mode == 'normal'                setl statusline+=%2*\ NORMAL\ %3*◤%*            endif            call SetStatus()        endfunction        au VimEnter     * call SetStatusInsertMode('normal')        au InsertEnter  * call SetStatusInsertMode(v:insertmode)        au InsertLeave  * call SetStatusInsertMode('normal')        au BufEnter     * call SetStatusInsertMode('normal')        " Update when leaving Buffer        function! SetStatusLeaveBuffer()            setl statusline=""            call SetStatus()        endfunction        au BufLeave * call SetStatusLeaveBuffer()        " Get file size        function! FileSize()                let bytes = getfsize(expand("%:p"))                if bytes <= 0                    return "0Ko"                endif                if bytes < 1024                    return bytes . "o"                else                    return (bytes / 1024) . "Ko"                endif        endfunction    " Wrapping & folding        set nowrap                                  " don't wrap lines        set foldcolumn=0                            " hide folding column        set foldmethod=indent                       " folds using indent        set foldnestmax=10                          " max 10 nested folds        set foldlevelstart=99                       " folds open by default        set textwidth=80        set wrapmargin=2    " Files & buffers        set hidden                                  " buffer change silent        set equalalways        set lazyredraw        set history=1000                            " Number of history actions to keep        set undolevels=1000                         " Number of undos to keep        au BufRead,BufNewFile *.txt set ft=sh       " opens .txt with highlight        set wildignore=*/tmp/*,*.so,*.swp,*.zip,.bak,.pyc,.o,.ojb,.,a,.pdf,.jpg,.gif,.png,.avi,.mkv,.so      "ignore these files    " Editing        set spelllang=fr        set nospell        set wildmenu                                " better auto complete        set wildmode=longest,full,list                   " bash-like auto complete        set nostartofline                           " no goto #1 char in line        set iskeyword+=_,$,@,%,#                    " not word dividers        set autoindent                              " preserve indentation        set smartindent                             " see autoindent        set copyindent                              " copy the previous indentation        set backspace=indent,eol,start              " smart backspace        set nrformats+=alpha                        " incr/decr letters C-a/-x        au FileType c,cpp setlocal comments -=:// comments +=f://    " Tabulation        set expandtab                               " no real tabs        set shiftround                              " be clever with tabs        set shiftwidth=4                            " tabs width        set smarttab                                " tab to 0,4,8 etc.        set softtabstop=4                           " tab feels like <tab>        set tabstop=4                               " replace <TAB> w/4 spaces    " Searching        set gdefault                                " default to s//g (global)        set incsearch                               " live-search        set hlsearch                                " highlight search        set ignorecase                              " case insensitive search        set smartcase                               " ignore case, except if explicitely capitals        set matchtime=2                             " time to blink match {}        set matchpairs+=<:>                         " for ci< or ci>        set showmatch                               " tmpjump to match-bracket        autocmd BufReadPost *            \ if line("'\"") > 0 && line("'\"") <= line("$") |            \     exe "normal! g`\"" |            \ endif    " Backup & storage        set autochdir                               " always use current directory        set autoread                                " refresh if changed        set backup                                  " backup current file        set backupdir=/tmp                          " backup directory        set backupext=~                             " append ~ to backups        set undofile                                " store undos        set undodir=/tmp                            " undo directory        set confirm                                 " confirm changed files        set noautowrite                             " never autowrite files        set swapfile                                " make swap files        set updatecount=50                          " update swp after 50 characters difference        set dir=/tmp                                " store everything        autocmd BufWinLeave *.* mkview        autocmd BufWinEnter *.* silent loadview""" }}} END OPTIONS""" KEYMAPS {{{    let mapleader=","                               " change leader key    " Buffers & windows        " Kill buffer        noremap ]k :bd<CR>        noremap [k :bd<CR>        noremap <leader>bk :bd<CR>        noremap <leader>bq :bd<CR>        " Split windows/buffers into new windows/buffers        nmap <leader>s<left>   :leftabove  vnew<CR>        nmap <leader>s<right>  :rightbelow vnew<CR>        nmap <leader>s<up>     :leftabove  new<CR>        nmap <leader>s<down>   :rightbelow new<CR>        nnoremap <leader>sv <C-w>v<C-w>l             " vertical        nnoremap <leader>sh <C-w>s<C-w>l             " horizontal        " Easy window navigation        map <C-h> <C-w>h        map <C-j> <C-w>j        map <C-k> <C-w>k        map <C-l> <C-w>l        map <leader>h <C-w>h        map <leader>j <C-w>j        map <leader>k <C-w>k        map <leader>l <C-w>l        map <leader>q <C-w>q        map <leader>bn ]b        map <leader>bp [b        " Better resizing        nnoremap <C-w>< 20<C-w><        nnoremap <C-w>> 20<C-w>>        nnoremap <C-w>m< 60<C-w><        nnoremap <C-w>m> 60<C-w>>        nnoremap <C-w>b <C-w>=        nnoremap <C-W>mm :call MaximizeToggle()<CR>        function! MaximizeToggle()            if exists("s:maximize_session")                exec "source " . s:maximize_session                call delete(s:maximize_session)                unlet s:maximize_session                let &hidden=s:maximize_hidden_save                unlet s:maximize_hidden_save            else                let s:maximize_hidden_save = &hidden                let s:maximize_session = tempname()                set hidden                exec "mksession! " . s:maximize_session                only            endif        endfunction    " Utilities        " Go to first non-blank char with Home        noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'        imap <silent> <Home> <C-O><Home>        " Quickly edit/source .vimrc        noremap <leader>ve :edit ~/.vimrc<CR>        noremap <leader>vs :source ~/.vimrc<CR>        " delete trailing whitespaces        nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>        " Standard remaps        noremap ;; i        inoremap ;; <Esc>        map ; .        " Select all text        nnoremap <leader>v V`]        " We don't need any help!        inoremap <F1> <ESC>        nnoremap <F1> <ESC>        vnoremap <F1> <ESC>        " Clear the search highlighting        nmap <leader>n :nohlsearch<CR>    " Motions        " Move faster        map <leader>g <C-d>        map <leader>G <C-u>        " Treat wrapped lines as normal lines        nnoremap j gj        nnoremap k gk        " Learn to use hjkl instead of arrows        nnoremap <up> <nop>        nnoremap <down> <nop>        nnoremap <left> <nop>        nnoremap <right> <nop>        " Move a line of text using ,m{j,k}        nmap <leader>m<Down> mz:m+<CR>        nmap <leader>m<Up> mz:m-2<CR>    " Folding & wrapping        " Toggle text wrapping        nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>        " Toggle folding        nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>        " Fold line        vnoremap <Space> zf""" END KEYMAPS }}}""" PLUGINS & FUNCTIONS MAPPINGS {{{    " Syntastic    nnoremap <F1> :call ToggleSyntasticCheck()<CR>    inoremap <F1> <ESC>:call ToggleSyntasticCheck()<CR>a    noremap <silent><leader>sce :Errors<CR>    noremap <silent><leader>scl :lcl<CR>    let g:syntastic_state = 0    function! ToggleSyntasticCheck()        if (g:syntastic_state == 0)            let g:syntastic_state = 1            SyntasticCheck        else            let g:syntastic_state = 0            SyntasticReset       endif    endfunction    "  NERDTree    nnoremap <silent> <F2> :NERDTreeToggle<CR>    inoremap <silent> <F2> <ESC>:NERDTreeToggle<CR>    " SrcExpl    nnoremap <F3> :SrcExplToggle<CR>    inoremap <F3> <ESC>:SrcExplToggle<CR>    " YankRing    nnoremap <silent> <F4> :YRShow<CR>    inoremap <silent> <F4> <ESC>:YRShow<CR>    " Gundo    nnoremap <silent> <F5> :GundoToggle<CR>    inoremap <silent> <F5> <ESC>:GundoToggle<CR>    " Tagbar    nnoremap <silent> <F6> :TagbarToggle<CR>    inoremap <silent> <F6> <ESC>:TagbarToggle<CR>    " Signature    nnoremap <F7> :SignatureToggle<CR>    inoremap <F7> <ESC>:SignatureToggle<CR>a    " Toggle syntax highlight    nnoremap <F8> :if exists("syntax_on")                \<Bar>syntax off<Bar>else<Bar>syntax enable<Bar>endif<CR>    inoremap <F8> <ESC>:if exists("syntax_on")                \<Bar>syntax off<Bar>else<Bar>syntax enable<Bar>endif<CR>a    " Pastemode    noremap <F9> :call TogglePasteWithEcho()<CR>    inoremap <F9> <ESC>:call TogglePasteWithEcho()<CR>a    let g:paste_state = 0    function! TogglePasteWithEcho()        if (g:paste_state == 0)            let g:paste_state = 1            set paste            echo "Paste Mode Enabled! Most plugins won't work!"        else            let g:paste_state = 0            set nopaste            echo "Paste Mode Disabled!"        endif    endfunction    " Toggle spellcheck    noremap <F10> :call ToggleSpellCheck()<CR>    inoremap <F10> <ESC>:call ToggleSpellCheck()<CR>    noremap <leader><F10> :set spelllang=en<CR>    function! ToggleSpellCheck()        if &spell            set nospell        else            set spell        endif    endfunction    " Toggle numbers/relative numbers    noremap <F11> :call ToggleNumbersType()<CR>    inoremap <F11> <ESC>:call ToggleNumbersType()<CR>a    let g:relnum = 1    let g:shownum = 1    function! ToggleNumbersType()        if (g:relnum == 1) && (g:shownum == 1)            set nonumber            let g:shownum = 0        elseif (g:relnum == 1) && (g:shownum == 0)            let g:relnum = 0            set norelativenumber            let g:shownum = 1            set number        elseif (g:relnum == 0) && (g:shownum == 1)            set nonumber            let g:shownum = 0        elseif (g:relnum == 0) && (g:shownum == 0)            set relativenumber            set number            let g:shownum = 1            let g:relnum = 1        endif    endfunction    " Toggle mouse support (plugin)    noremap <F12> :call <SID>ToggleMouse()<CR>    inoremap <F12> <ESC>:call <SID>ToggleMouse()<CR>a    " MiniBufExpl    nnoremap <silent> <Leader>t :MBEToggle<cr>    " NrrwRgn    xmap <leader>nr <Plug>NrrwrgnDo    " CtrlP    nnoremap <leader>pp :CtrlP<CR>    nnoremap <leader>pb :CtrlPBuffer<CR>    nnoremap <leader>pm :CtrlPMixed<CR>    " Highlight characters past 80, toggle with <leader>ol    nnoremap <leader>ol :call ToggleOverLengthHighlight()<CR>    let g:overlength_enabled = 0    function! ToggleOverLengthHighlight()        if g:overlength_enabled == 0            match            match OverLength /\%80v.*/            let g:overlength_enabled = 1            echo 'Overlength highlighting activated'            autocmd! CursorMoved        else            match            if g:occurences == 1                autocmd CursorMoved * silent! exe printf('match Occurences /\V\<%s\>/', escape(expand('<cword>'), '/\'))            endif            let g:overlength_enabled = 0            echo 'Overlength highlighting disabled'        endif    endfunction    " Highlight occurences of the word under cursor    nnoremap <leader>oc :call ToggleOccurences()<cr>    autocmd CursorMoved * silent! exe printf('match Occurences /\V\<%s\>/', escape(expand('<cword>'), '/\'))    let g:occurences = 1    function! ToggleOccurences()            if g:occurences == 0                match                autocmd CursorMoved * silent! exe printf('match Occurences /\V\<%s\>/', escape(expand('<cword>'), '/\'))                let g:occurences = 1            else                autocmd! CursorMoved                let g:occurences = 0                match            endif    endfunction    " Show syntax highlighting group for word under cursor    nmap <leader>wc :call SynStack()<CR>    func! SynStack()        if !exists("*synstack")            return        endif        echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')    endfunc""" END PLUGINS & FUNCTIONS KEYMAPS }}}""" PLUGINS SETTINGS {{{    " Omni Completion    set completeopt=longest,menuone    set wildmode=longest,list:longest    " Yankring    let g:yankring_history_dir = '/home/logan/.vim/plugin'    let g:yankring_max_history = 250    let g:yankring_min_element_length = 3    let g:yankring_max_element_length = 4194304    let g:yankring_max_display = 250    let g:yankring_persist = 1    let g:yankring_dot_repeat_yank = 1    let g:yankring_manual_clipboard_check = 1    let g:yankring_window_use_horiz = 0    let g:yankring_window_use_right = 0    let g:yankring_window_width = 30    " Autopairs    let g:AutoPairs = {'(':')', '[':']', '<':'>', '&':'&', '|':'|', '{':'}',"'":"'",'"':'"', '`':'`'}    let g:AutoPairsShortcutToggle = '<leader>ac'    " Signature    let g:SignatureMarkOrder = "\m."    let g:SignatureMarkTextHL = 'Signature'    let g:SignatureMarkerTextHL = 'Markers'    let g:SignaturePurgeConfirmation = 1    let g:SignaturePrioritizeMarks = 0    let g:SignaturePeriodicRefresh = 1    " Gundo    let g:gundo_width = 30    let g:gundo_preview_height = 30    let g:gundo_right = 0    let g:gundo_help = 0    " Tagbar    let g:tagbar_compact = 1    let g:tagbar_indent = 4    let g:tagbar_show_linenumbers = 0    let g:tagbar_singleclick = 1    let g:tagbar_iconchars = ['+', '-']    let g:tagbar_width = 30    let g:tagbar_left = 0    " SrcExpl    let g:SrcExpl_pluginList = [                     \ "__Tag_List__",                     \ "NERD_tree_1",                     \ "Source_Explorer",                     \ ]    " Loremipsum    let g:loremipsum_words = 50    " Matchit    let b:match_ignorecase = 1    " NrrwRgn    let g:nrrw_rgn_vert = 0    let g:nrrw_rgn_hl = 'NrrwRg'    let g:nrrw_rgn_wdth = 30    " NERDTree    let g:NERDTreeWinPos = "left"    let g:NERDTreeHijackNetrw=1    " EasyMotion    let g:EasyMotion_leader_key = '<Leader><Leader>'    let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'    " tComment    let g:tcommentBlankLines = 0    let g:tcommentModeExtra = ">>"    " CtrlP    let g:ctrlp_working_path_mode = 'ra'    let g:ctrlp_switch_buffer = 1    let g:ctrlp_dotfiles = 1    let g:ctrlp_clear_cache_on_exit=0    let g:ctrlp_custom_ignore = {      \ 'dir':  '\v[\/]\.(git|hg|svn)$',        \ 'file': '\v\.(exe|so|dll)$',          \ 'link': 'some_bad_symbolic_links',            \ }    " Syntastic    let g:syntastic_check_on_wq=1    let g:syntastic_cpp_check_header = 1    let g:syntastic_cpp_compiler_options = ' -std=c++0x'    let g:syntastic_mode_map = {        \ 'mode': 'passive',        \ 'active_filetypes':            \ ['c', 'php', 'cpp', 'haskell', 'ruby', 'javascript', 'perl', 'python', 'sh'] }""" END PLUGINS SETTINGS }}}""" MISC {{{    " Use ~/.vimrc.local if exists    if filereadable($HOME."/.vimrc.local")        source $HOME/.vimrc.local    endif""" END MISC }}}}}""""" END VIM CONFIGURATION FILE {{{{{,V
set wildmode=longest,list:longest,v
    Select,V
    " Omni Completion    set completeopt=longest,menuone,V
set completeopt=longest,menuone,v
g:AutoPairsShortcutToggle,v
    let g:AutoCloseProtectedRegions = ["Comment"],V
    let g:AutoClosePairs_add = "<> | &",V
    " Autoclose,V
    nnoremap <leader>ac :AutoCloseToggle<cr>,V
     " Bundle 'vim-scripts/simple-pairs',V
     " Bundle 'Townk/vim-autoclose',V
 vim-scripts / Auto-Pairs,V
vim-scripts/simple-pairs,v
 vim-scripts / simple-pairs,V
     Bundle ' vim-scripts /ClosePairs',V
2:Vundle list,v
 vim-scripts / ClosePairs,V
Townk/vim-autoclose,v
that,v
inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>",v
var,v
        </>,V
Vim 7's popup menu for completion (omni or otherwise) takes a little getting used to when it comes to selecting the completed word. See :help ins-completion. The completed word can be selected using the arrow, PgUp/PgDn, Enter and Esc keys. In addition to that, there is Ctrl-E, Ctrl-Y, Ctrl-N and Ctrl-P. ,v
    endfunc,V
        echo "Word under cursor was " . word,V
        center,V
        s/\w\+/\u&/g,V
        let word = expand('<cword>'),V
    func! TitleCaseCenter(),V
    nmap <leader>wt :call TitleCaseCenter()<CR>,V
    let g:spellcheck_state = 0,V
func! TitleCaseCenter()  let word = expand('<cword>')  s/\w\+/\u&/g  center  echo "Word under cursor was " . wordendfunc,v
nmap <C-e> :call SynStack()<CR>func! SynStack()  if !exists("*synstack")    return  endif  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')endfunc,v
            let g:spellcheck_state = 1,V
            let g:spellcheck_state = 0,V
            set nospell            let g:spellcheck_state = 0,V
            let g:spellcheck_state = 1            set spell,V
autocmd BufWinEnter <buffer> wincmd L,v
Helps plugin writers find trouble-causing options before their users do,v
~/.xmonad/sc ~/.xmonad/scripts/dzen_date_next.sh,v
~/.xmonad/sc ~/.xmonad/scripts/dzen_date_prev.sh,v
~/.xmonad/sc ~/.xmonad/scripts/dzen_date.sh,v
 tpope / vim-repeat,V
     Bundle 'vim-scripts/closetag.vim',V
mileszs/ack.vim,v
    <ul>,V
    autocmd FileType haskell let b:AutoClosePairs = "\" \'",V
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------INFORMATIONS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- informations = { Author   = Graawr--                , Version  = XMonad 0.10 <+> ghc 7.4 <+> dzen-0.8.5--                , Updated  = August 27 2013--                }--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------IMPORTS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    -- Baseimport XMonadimport Data.Maybe (isJust)import XMonad.Config.Azerty (azertyConfig)import System.IO (hPutStrLn)import System.Exit (exitSuccess)import qualified Data.Map as M (fromList)import qualified XMonad.StackSet as W    -- Utilitiesimport XMonad.Util.EZConfig (additionalKeysP, additionalKeys, additionalMouseBindings)import XMonad.Util.NamedScratchpad (NamedScratchpad(NS), namedScratchpadManageHook, namedScratchpadAction, customFloating)import XMonad.Util.Run (safeSpawn, unsafeSpawn, runInTerm, spawnPipe)import XMonad.Util.SpawnOnce (spawnOnce)    -- Hooksimport XMonad.Hooks.DynamicLog (dynamicLogWithPP, defaultPP, dzenColor, pad, shorten, wrap, PP(..))import XMonad.Hooks.ManageDocks (avoidStruts, ToggleStruts(ToggleStruts))import XMonad.Hooks.Place (placeHook, withGaps, smart)import XMonad.Hooks.InsertPosition (insertPosition, Position(End), Focus(Newer))import XMonad.Hooks.FloatNext (floatNextHook, toggleFloatNext, toggleFloatAllNew)    -- Actionsimport XMonad.Actions.Promote (promote)import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)import XMonad.Actions.CopyWindow (kill1, copyToAll, killAllOtherCopies, runOrCopy)import XMonad.Actions.WindowGo (runOrRaise, raiseMaybe)import XMonad.Actions.WithAll (sinkAll, killAll)import XMonad.Actions.CycleWS (moveTo, shiftTo, WSType(WSIs))import XMonad.Actions.CycleRecentWS (cycleRecentWS)import XMonad.Actions.CycleWindows (cycleRecentWindows)import XMonad.Actions.FindEmptyWorkspace(viewEmptyWorkspace, tagToEmptyWorkspace)import XMonad.Actions.GridSelect (GSConfig(..), goToSelected, bringSelected, colorRangeFromClassName, buildDefaultGSConfig)import XMonad.Actions.DynamicWorkspaces (addWorkspacePrompt, removeEmptyWorkspace)import XMonad.Actions.Submap(submap)import XMonad.Actions.UpdatePointer (updatePointer, PointerPosition(Relative))import XMonad.Actions.MouseResize (mouseResize)import qualified XMonad.Actions.ConstrainedResize as Sqr (mouseResizeWindow)    -- Layouts modifiersimport XMonad.Layout.PerWorkspace (onWorkspace)import XMonad.Layout.Renamed (renamed, Rename(CutWordsLeft, Replace))import XMonad.Layout.WorkspaceDir (workspaceDir, changeDir)import XMonad.Layout.Spacing (spacing)import XMonad.Layout.Minimize (minimizeWindow, minimize, MinimizeMsg(RestoreNextMinimizedWin))import XMonad.Layout.Maximize (maximizeRestore, maximize)import XMonad.Layout.BoringWindows (boringWindows)import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))import XMonad.Layout.Reflect (reflectVert, reflectHoriz, REFLECTX(REFLECTX), REFLECTY(REFLECTY))import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), Toggle(Toggle), (??))import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))    -- Layoutsimport XMonad.Layout.GridVariants (Grid(Grid))import XMonad.Layout.SimplestFloat (simplestFloat)import XMonad.Layout.OneBig (OneBig(OneBig))import XMonad.Layout.ZoomRow (zoomRow, zoomIn, zoomOut, zoomReset, ZoomMessage(ZoomFullToggle))import XMonad.Layout.IM (withIM, Property(Role))    -- Promptsimport XMonad.Prompt (defaultXPConfig, XPConfig(..), XPPosition(Top), Direction1D(Next, Prev))--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------SETTINGS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    -- StylesmyFont          = "-artwiz-nu-medium-*-normal-*-11-*-*-*-*-*-*-*"myBorderWidth   = 1myColorBG       = "#181512"myColorWhite    = "#eddcd3"myColorRed      = "#cd546c"myColorBrown    = "#989584"    -- SettingsmyModMask       = mod4MaskmyTerminal      = "urxvtc_mod -name urxvt"    -- Prompts colorsmyPromptConfig =    defaultXPConfig { font                  = myFont                    , bgColor               = myColorBG                    , fgColor               = myColorRed                    , bgHLight              = myColorBG                    , fgHLight              = myColorBrown                    , borderColor           = myColorBG                    , promptBorderWidth     = myBorderWidth                    , height                = 20                    , position              = Top                    , historySize           = 0                    }    -- Grid selector colorsmyGridConfig = colorRangeFromClassName    (0x18,0x15,0x12) -- lowest inactive bg    (0x18,0x15,0x12) -- highest inactive bg    (0x18,0x15,0x12) -- active bg    (0x98,0x95,0x84) -- inactive fg    (0xcd,0x54,0x6c) -- active fgmyGSConfig colorizer  = (buildDefaultGSConfig myGridConfig)    { gs_cellheight   = 65    , gs_cellwidth    = 120    , gs_cellpadding  = 10    , gs_font         = myFont    }--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------SCRATCHPADS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myScratchpads =              [ NS "terminal" "urxvtc_mod -name terminal -e tmux attach"     (resource =? "terminal") myPosition              , NS "music" "urxvtc_mod -name music -e ncmpcpp"               (resource =? "music")    myPosition              , NS "rtorrent" "urxvtc_mod -name rtorrent -e rtorrent"        (resource =? "rtorrent") myPosition              , NS "wcalc" "urxvtc_mod -name wcalc -e wcalc"                 (resource =? "wcalc")    myPosition              , NS "weechat" "urxvtc_mod -name wcalc -e weechat-curses"      (resource =? "weechat")  myPosition              , NS "htop" "urxvtc_mod -name wcalc -e htop"                   (resource =? "htop")     myPosition              ] where myPosition = customFloating $ W.RationalRect (1/3) (1/3) (1/3) (1/3)--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------KEYBINDINGS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myKeys =    -- Xmonad        [ ("M-C-r",             spawn "xmonad --recompile")        , ("M-M1-r",            spawn "xmonad --restart")        , ("M-S-r",             spawn "if [ $(pgrep dzen | wc -w) -gt 0 ]; then pkill dzen && xmonad --restart; else xmonad --restart; fi")        , ("M-M1-q",            io exitSuccess)    -- Windows        , ("M1-S-r",            refresh)        , ("M-q",               kill1)        , ("M-C-q",             killAll)        , ("M-S-q",             killAll >> moveTo Next nonNSP >> killAll >> moveTo Next nonNSP >> killAll >> moveTo Next nonNSP >> killAll >> moveTo Next nonNSP)        , ("M-<End>",           withFocused $ windows . W.sink)        , ("M-S-<End>",         sinkAll)        , ("M-z",               windows W.focusMaster)        , ("M1-<Tab>",          windows W.focusDown)        , ("M-e",               windows W.focusUp)        , ("M-S-a",             windows W.swapDown)        , ("M-S-e",             windows W.swapUp)        , ("M1-,",              rotSlavesDown)        , ("M1-;",              rotAllDown)        , ("M-<Backspace>",     promote)        , ("M-s",               withFocused hide)        , ("M1-s",              withFocused float)        , ("M1-a",              windows copyToAll)        , ("M1-S-a",            killAllOtherCopies)        , ("M-*",               withFocused minimizeWindow)        , ("M-S-*",             sendMessage RestoreNextMinimizedWin)        , ("M-!",               withFocused (sendMessage . maximizeRestore))        , ("M-$",               toggleFloatNext)        , ("M-S-$",             toggleFloatAllNew)        , ("M-C-M1-<Up>",       sendMessage Arrange)        , ("M-C-M1-<Down>",     sendMessage DeArrange)        , ("M-<Up>",            sendMessage (MoveUp 10))        , ("M-<Down>",          sendMessage (MoveDown 10))        , ("M-<Right>",         sendMessage (MoveRight 10))        , ("M-<Left>",          sendMessage (MoveLeft 10))        , ("M-S-<Up>",          sendMessage (IncreaseUp 10))        , ("M-S-<Down>",        sendMessage (IncreaseDown 10))        , ("M-S-<Right>",       sendMessage (IncreaseRight 10))        , ("M-S-<Left>",        sendMessage (IncreaseLeft 10))        , ("M-C-<Up>",          sendMessage (DecreaseUp 10))        , ("M-C-<Down>",        sendMessage (DecreaseDown 10))        , ("M-C-<Right>",       sendMessage (DecreaseRight 10))        , ("M-C-<Left>",        sendMessage (DecreaseLeft 10))    -- Layouts        , ("M-S-<Space>",       sendMessage ToggleStruts)        , ("M-d",               asks (XMonad.layoutHook . config) >>= setLayout)        , ("M-n",               sendMessage NextLayout)        , ("M-<KP_Enter>",      sendMessage NextLayout)        , ("M1-S-f",            sendMessage (T.Toggle "float"))        , ("M1-S-g",            sendMessage (T.Toggle "gimp"))        , ("M-S-x",             sendMessage $ Toggle REFLECTX)        , ("M-S-y",             sendMessage $ Toggle REFLECTY)        , ("M-S-m",             sendMessage $ Toggle MIRROR)        , ("M-S-b",             sendMessage $ Toggle NOBORDERS)        , ("M1-f",              sendMessage (Toggle NBFULL) >> sendMessage ToggleStruts)        , ("M-<KP_Multiply>",   sendMessage (IncMasterN 1))        , ("M-<KP_Divide>",     sendMessage (IncMasterN (-1)))        , ("M-S-<KP_Divide>",   decreaseLimit)        , ("M-S-<KP_Multiply>", increaseLimit)        , ("M-h",               sendMessage Shrink)        , ("M-l",               sendMessage Expand)        , ("M-k",               sendMessage zoomIn)        , ("M-j",               sendMessage zoomOut)        , ("M-S-;",             sendMessage zoomReset)        , ("M-;",               sendMessage ZoomFullToggle)    -- Workspaces        , ("M1-<KP_Add>",       moveTo Next nonNSP)        , ("M1-<KP_Subtract>",  moveTo Prev nonNSP)        , ("M-<KP_Add>",        moveTo Next nonEmptyNonNSP)        , ("M-<KP_Subtract>",   moveTo Prev nonEmptyNonNSP)        , ("M-S-<KP_Add>",      shiftTo Next nonNSP >> moveTo Next nonNSP)        , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)        , ("M-M1-<KP_Add>",     addWorkspacePrompt myPromptConfig)        , ("M-M1-<KP_Subtract>",removeEmptyWorkspace)        , ("C-<KP_Subtract>",   viewEmptyWorkspace)        , ("C-<KP_Subtract>",   viewEmptyWorkspace)        , ("C-S-<KP_Subtract>", tagToEmptyWorkspace)        , ("C-S-<KP_Add>",      tagToEmptyWorkspace)    -- Apps        , ("M-<Return>",        spawn "urxvtc_mod -name urxvt")        , ("M-S-<Return>",      spawn "urxvtc_mod -name anyWorkspace")        , ("M-<Space>",         spawn "dmenu_run -nb '#181512' -nf '#989584' -sb '#181512' -sf '#cd546c' -p '>>' -fn '-*-nu-medium-*-*-*-*-*-*-*-*-*-*-*' -i")        , ("C-<Space>",         spawn "pkill dunst")        , ("M1-<Space>",        spawn "kill_applet")        , ("M-g",               spawn "magnet")        , ("M-x",               safeSpawn "i3lock" ["-udc", "#000000"])        , ("M-f",               raiseMaybe (runInTerm "-name ranger" "ranger") (resource =? "ranger"))        , ("M-t",               raiseMaybe (runInTerm "-name newsbeuter" "newsbeuter") (resource =? "newsbeuter"))        , ("M-m",               raiseMaybe (runInTerm "-name mutt" "mutt") (resource =? "mutt"))        , ("M-w",               runOrRaise "iceweasel" (resource =? "Navigator"))        , ("M-C-f",             runOrRaise "thunar" (resource =? "thunar"))        , ("M-C-<Return>",      runOrRaise "trayerd" (resource =? "trayer"))        , ("M-M1-f",            runOrCopy "urxvtc_mod -name ranger -e ranger" (resource =? "ranger"))        , ("M-M1-t",            runOrCopy "urxvtc_mod -name newsbeuter -e newsbeuter" (resource =? "newsbeuter"))        , ("M-M1-m",            runOrCopy "urxvtc_mod -name mutt -e mutt" (resource =? "mutt"))        , ("M-M1-w",            runOrCopy "iceweasel" (resource =? "Navigator"))        , ("M-C-M1-f",          runOrCopy "thunar" (resource =? "thunar"))        , ("M-M1-C-<Return>",   runOrCopy "trayerd" (resource =? "trayer"))    -- Prompts        , ("M-,",               goToSelected $ myGSConfig myGridConfig)        , ("M-S-,",             bringSelected $ myGSConfig myGridConfig)        , ("M-:",               changeDir myPromptConfig)    -- Scratchpads        , ("M-<Tab>",           namedScratchpadAction myScratchpads "terminal")        , ("M-c",               namedScratchpadAction myScratchpads "wcalc")        , ("M-r",               namedScratchpadAction myScratchpads "rtorrent")        , ("M-v",               namedScratchpadAction myScratchpads "weechat")        , ("M-o",               namedScratchpadAction myScratchpads "htop")        , ("M-<F7>",            namedScratchpadAction myScratchpads "music")    -- Multimedia Keys        , ("M-<F7>",            namedScratchpadAction myScratchpads "music")        , ("<Print>",           spawn "scrotd 0")        , ("M-<Print>",         spawn "scrotd 5")        , ("<XF86AudioPlay>",   spawn "mpc toggle")        , ("<XF86AudioPrev>",   spawn "mpc prev")        , ("<XF86AudioNext>",   spawn "mpc next")        , ("<XF86AudioMute>",   spawn "amixer set Master toggle")        , ("<XF86AudioLowerVolume>",    spawn "amixer set Master 5%-")        , ("<XF86AudioRaiseVolume>",    spawn "amixer set Master 5%+")        , ("<XF86TouchpadToggle>",      spawn "touchpad_toggle")        , ("<XF86MonBrightnessDown>",   spawn "xbacklight -dec 10")        , ("M-<XF86MonBrightnessDown>", spawn "xbacklight -set 0")        , ("<XF86MonBrightnessUp>",     spawn "xbacklight -inc 10")        , ("M-<XF86MonBrightnessUp>",   spawn "xbacklight -set 100")        ] where nonNSP         = WSIs (return (\ws -> W.tag ws /= "NSP"))                nonEmptyNonNSP = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))mySubKeys =        [ ((mod4Mask, xK_F5),   submap . M.fromList $          [ ((0, xK_F5),            spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_music.sh")          , ((0, xK_a),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_artistinfo.sh")          , ((0, xK_b),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_albuminfo.sh")          , ((0, xK_l),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_lyrics.sh") ])        , ((mod4Mask, xK_F4),   submap . M.fromList $          [ ((0, xK_F4),            spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_battery.sh") ])        , ((mod4Mask, xK_F3),   submap . M.fromList $          [ ((0, xK_F3),            spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_cputop.sh")          , ((0, xK_h),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_hardware.sh")          , ((0, xK_n),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_network.sh") ])        , ((mod4Mask, xK_F2),   submap . M.fromList $          [ ((0, xK_F2),            spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_memtop.sh")          , ((0, xK_h),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_hardware2.sh")          , ((0, xK_n),             spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_network2.sh") ])        , ((mod4Mask, xK_F1),   submap . M.fromList $          [ ((0, xK_F1),            spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_date.sh")          , ((0, xK_equal),         spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_date_next.sh")          , ((0, xK_minus),         spawn "~/.xmonad/sc ~/.xmonad/scripts/dzen_date_prev.sh") ])          -- Windows        , ((mod4Mask, xK_ampersand), spawn "pkill compton && pkill syndaemon && pkill xautolock && pkill tmux && pkill urxvtd")        , ((0, xK_Menu), promote)        , ((mod4Mask, xK_a), cycleRecentWindows [xK_Super_L] xK_e xK_a)        , ((mod4Mask, xK_b), cycleRecentWS [xK_Super_L] xK_e xK_a)        -- Layouts        , ((mod4Mask, xK_equal), sendMessage (IncMasterN 1))        , ((mod4Mask, xK_minus), sendMessage (IncMasterN (-1)))        , ((mod4Mask .|. shiftMask, xK_minus), decreaseLimit)        , ((mod4Mask .|. shiftMask, xK_equal), increaseLimit)    -- Workspaces controls        , ((0, xK_Prior), moveTo Next (WSIs (return (\ws -> W.tag ws /= "NSP"))))        , ((0, xK_Next),  moveTo Prev (WSIs (return (\ws -> W.tag ws /= "NSP"))))        , ((mod4Mask, xK_Prior), moveTo Next (WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))))        , ((mod4Mask, xK_Next),  moveTo Prev (WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))))        , ((mod4Mask .|. shiftMask, xK_Prior),     shiftTo Next (WSIs (return (\ws -> W.tag ws /= "NSP"))) >> moveTo Next (WSIs (return (\ws -> W.tag ws /= "NSP"))))        , ((mod4Mask .|. shiftMask, xK_Next),      shiftTo Prev (WSIs (return (\ws -> W.tag ws /= "NSP"))) >> moveTo Prev (WSIs (return (\ws -> W.tag ws /= "NSP"))))        , ((mod4Mask .|. mod1Mask, xK_Prior),      addWorkspacePrompt myPromptConfig)        , ((mod4Mask .|. mod1Mask, xK_Next),       removeEmptyWorkspace)        , ((controlMask, xK_Next),                 viewEmptyWorkspace)        , ((controlMask, xK_Prior),                viewEmptyWorkspace)        , ((controlMask .|. shiftMask, xK_Prior),  tagToEmptyWorkspace)        , ((controlMask .|. shiftMask, xK_Next),   tagToEmptyWorkspace)        ]myMouseKeys = [ ((mod4Mask .|. shiftMask, button3), \w -> focus w >> Sqr.mouseResizeWindow w True) ]--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------WORKSPACES-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myWorkspaces = [" i", "ii", "iii", "iv"]myManageHook = placeHook (withGaps (20,12,12,12) (smart (0.5,0.5))) <+> insertPosition End Newer <+> floatNextHook <+> namedScratchpadManageHook myScratchpads <+>        (composeAll . concat $        [ [ resource  =? r --> doF (W.view " i" . W.shift " i")   | r <- myTermApps    ]        , [ resource  =? r --> doF (W.view "ii" . W.shift "ii")   | r <- myWebApps     ]        , [ resource  =? r --> doF (W.view "iii" . W.shift "iii") | r <- myMediaApps   ]        , [ resource  =? r --> doF (W.view "iv" . W.shift "iv")   | r <- mySystApps    ]        , [ resource  =? r --> doFloat                            | r <- myFloatApps   ]        , [ resource  =? r --> doIgnore                           | r <- myIgnoredApps ]        , [ className =? c --> ask >>= doF . W.sink               | c <- myUnfloatApps ]        ]) <+> manageHook defaultConfig        where            myTermApps    = ["urxvt", "xterm", "xfce4-terminal", "xfontsel"]            myWebApps     = ["Navigator", "newsbeuter", "mutt", "luakit", "midori", "Mail", "dwb"]            myMediaApps   = ["easytag", "sonata", "comix", "inkscape", "vlc", "zathura", "VCLSalFrame.DocumentWindow", "gnome-mplayer", "Audacity", "hotot", "ncmpcpp", "weechat", "mplayer", "gimp", "gimp-2.8"]            mySystApps    = ["ranger", "thunar", "Thunar", "lxappearance", "geany", "nitrogen", "Qt-subapplication", "gparted", "bleachbit", "xfburn"]            myFloatApps   = ["Dialog", "htop", "file-roller", "nitrogen", "display", "display.im6", "xmessage", "trayer"]            myUnfloatApps = ["Gimp"]            myIgnoredApps = ["feh"]--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LAYOUTS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts float $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) $ renamed [CutWordsLeft 4] $ maximize $ minimize $ boringWindows $ spacing 14 $                onWorkspace " i"  myTermLayout  $                onWorkspace "ii"  myWebLayout   $                onWorkspace "iii" myMediaLayout $                onWorkspace "iv"  mySystLayout                myDefaultLayout    where        myTermLayout    = workspaceDir "~"                 $ oneBig  ||| space ||| lined ||| grid        myWebLayout     = workspaceDir "~/Téléchargements" $ monocle ||| oneBig ||| space ||| lined        myMediaLayout   = workspaceDir "~/Vidéos"          $ T.toggleLayouts gimp $ monocle ||| oneBig ||| space ||| lined        mySystLayout    = workspaceDir "~"                 $ lined ||| oneBig ||| space ||| monocle ||| grid        myDefaultLayout = workspaceDir "/"                 $ float ||| oneBig ||| space ||| lined ||| monocle ||| grid        oneBig          = renamed [Replace "oneBig"]       $ limitWindows 6  $ Mirror $ mkToggle (single MIRROR) $ mkToggle (single REFLECTX) $ mkToggle (single REFLECTY) $ OneBig (2/3) (2/3)        space           = renamed [Replace "space"]        $ limitWindows 4  $ spacing 36 $ Mirror $ mkToggle (single MIRROR) $ mkToggle (single REFLECTX) $ mkToggle (single REFLECTY) $ OneBig (2/3) (2/3)        lined           = renamed [Replace "lined"]        $ limitWindows 3  $ Mirror $ mkToggle (single MIRROR) zoomRow        monocle         = renamed [Replace "monocle"]      $ limitWindows 20   Full        grid            = renamed [Replace "grid"]         $ limitWindows 12 $ mkToggle (single MIRROR) $ Grid (16/10)        float           = renamed [Replace "float"]        $ limitWindows 20   simplestFloat        gimp            = renamed [Replace "gimp"]         $ limitWindows 5  $ withIM 0.11 (Role "gimp-toolbox") $ reflectHoriz $ withIM 0.15 (Role "gimp-dock") Full--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------STATUSBAR-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myBitmapsDir = "/home/logan/.xmonad/statusbar/icons"myXmonadBarL = "dzen2 -x '0' -y '0' -h '16' -w '400' -ta 'l' -fg '"++myColorWhite++"' -bg '"++myColorBG++"' -fn '"++myFont++"'"myXmonadBarR = "conky -c /home/logan/.xmonad/statusbar/conky_dzen | dzen2 -x '400' -y '0' -w '1000' -h '16' -ta 'r' -bg '"++myColorBG++"' -fg '"++myColorWhite++"' -fn '"++myFont++"'"myLogHook h  = dynamicLogWithPP $ defaultPP      { ppOutput           = hPutStrLn h      , ppCurrent          = wrap "^ca(1, xdotool key Prior)^ca(3, xdotool key Next)" "^ca()^ca()" . dzenColor myColorRed myColorBG . pad      , ppHidden           = wrap "^ca(1, xdotool key Prior)^ca(3, xdotool key Next)" "^ca()^ca()" . dzenColor myColorBrown myColorBG  . noScratchPad      , ppHiddenNoWindows  = wrap "^ca(1, xdotool key Prior)^ca(3, xdotool key Next)" "^ca()^ca()" . dzenColor myColorBG myColorBG   . noScratchPad      , ppSep              = dzenColor myColorRed myColorBG "  "      , ppWsSep            = dzenColor myColorRed myColorBG ""      , ppTitle            = wrap "^ca(3, xdotool key super+q)" "^ca()" . dzenColor myColorBrown myColorBG  . shorten 50      , ppOrder            = \(ws:l:t:_) -> [ws,l,t]      , ppLayout           = wrap "^ca(1, xdotool key super+Home)^ca(3, xdotool key super+d)" "^ca()^ca()" . dzenColor myColorRed myColorBG .                             (\x -> case x of                                 "oneBig"       -> "   ^i("++myBitmapsDir++"/mini/nbstack.xbm)"                                 "space"        -> "   ^i("++myBitmapsDir++"/mini/nbstack.xbm)"                                 "lined"        -> "   ^i("++myBitmapsDir++"/mini/bstack2.xbm)"                                 "monocle"      -> "   ^i("++myBitmapsDir++"/mini/monocle.xbm)"                                 "grid"         -> "   ^i("++myBitmapsDir++"/mini/grid.xbm)"                                 "float"        -> "   ^i("++myBitmapsDir++"/mini/float.xbm)"                                 "gimp"         -> "   ^i("++myBitmapsDir++"/fox.xbm)"                                 "Full"         -> "   ^i("++myBitmapsDir++"/mini/monocle2.xbm)"                                 _              -> x                             )      } where noScratchPad ws = if ws == "NSP" then "" else pad ws--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------AUTOSTART-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------myStartupHook = do          spawnOnce "xsetroot -cursor_name left_ptr &"          spawnOnce "sh ~/.fehbg &"--          spawnOnce "mpd &"          spawnOnce "unclutter &"          spawnOnce "compton -cb -e 0.8 -t -8 -l -9 -r 6 -o 0.7 -m 1.0 &"          spawnOnce "xautolock -time 8 -locker 'i3lock -udc #000000'"          spawnOnce "gnome-keyring-daemon --start --components=pkcs11 &"          spawnOnce "urxvtc_mod -name terminal -e tmux &"          spawnOnce "xbacklight -set 0"          spawnOnce "syndaemon -dkK -i 2"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------CONFIG-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------main = do    dzenLeftBar  <- spawnPipe myXmonadBarL    dzenRightBar <- spawnPipe myXmonadBarR    xmonad       $  azertyConfig        { modMask            = myModMask        , terminal           = myTerminal        , manageHook         = myManageHook        , layoutHook         = myLayoutHook        , logHook            = myLogHook dzenLeftBar >> updatePointer (Relative 0.5 0.5)        , startupHook        = myStartupHook        , workspaces         = myWorkspaces        , borderWidth        = myBorderWidth        , normalBorderColor  = myColorBG        , focusedBorderColor = myColorWhite        } `additionalKeysP`         myKeys          `additionalKeys`          mySubKeys          `additionalMouseBindings` myMouseKeys,V
      (),V
AutoClose#ParsePairs,v
ommand,v
vim-scripts/SrcExpl,v
 autocommand FileType lisp              \ let b:AutoClosePairs = AutoClose#ParsePairs("\" ()"),v
 vim-scripts / closetag.vim,V
     Bundle 'vim-scripts/SrcExpl',V
     Bundle 'Townk/vim-autoclose',V
      let g:AutoClosePairs_add = "<> |",v
        let delimitMate_excluded_regions = "Comment,String",v
    " DelimitMate,V
Autoclose,v
bullet  &#8226;,V
password dot    &#9679;     ●,V
omega   &omega;     ω,V
Omega   &Omega;     Ω,V
psi &psi;       ψ,V
Psi &Psi;       Ψ,V
kappa   &kappa;     κ,V
Kappa   &Kappa;     Κ,V
iota    &iota;      ι,V
Iota    &Iota;      Ι,V
theta   &theta;     θ,V
Theta   &Theta;     Θ,V
eta &eta;       η,V
Eta &Eta;       Η,V
zeta    &zeta;      ζ,V
Zeta    &Zeta;      Ζ,V
epsilon &epsilon;       ε,V
Epsilon &Epsilon;       Ε,V
delta   &delta;     δ,V
Delta   &Delta;     Δ,V
gamma   &gamma;     γ,V
Gamma   &Gamma;     Γ,V
beta    &beta;      β,V
Beta    &Beta;      Β,V
alpha   &alpha;     α,V
Alpha   &Alpha;     Α,V
lowercase y, umlaut &#255;  &yuml;  ÿ,V
lowercase thorn, Icelandic  &#254;  &thorn; þ,V
lowercase y, acute accent   &#253;  &yacute;    ý,V
lowercase u, umlaut &#252;  &uuml;  ü,V
lowercase u, circumflex accent  &#251;  &ucirc; û,V
lowercase u, acute accent   &#250;  &uacute;    ú,V
lowercase u, grave accent   &#249;  &ugrave;    ù,V
lowercase o, slash  &#248;  &oslash;    ø,V
division sign   &#247;  &divide;    ÷,V
lowercase o, umlaut &#246;  &ouml;  ö,V
lowercase o, tilde  &#245;  &otilde;    õ,V
lowercase o, circumflex accent  &#244;  &ocirc; ô,V
lowercase o, acute accent   &#243;  &oacute;    ó,V
lowercase o, grave accent   &#242;  &ograve;    ò,V
lowercase n, tilde  &#241;  &ntilde;    ñ,V
lowercase eth, Icelandic    &#240;  &eth;   ð,V
lowercase i, umlaut &#239;  &iuml;  ï,V
lowercase i, circumflex accent  &#238;  &icirc; î,V
lowercase i, acute accent   &#237;  &iacute;    í,V
lowercase i, grave accent   &#236;  &igrave;    ì,V
lowercase e, umlaut &#235;  &euml;  ë,V
lowercase e, circumflex accent  &#234;  &ecirc; ê,V
lowercase e, acute accent   &#233;  &eacute;    é,V
lowercase e, grave accent   &#232;  &egrave;    è,V
lowercase c, cedilla    &#231;  &ccedil;    ç,V
lowercase ae    &#230;  &aelig; æ,V
lowercase a, ring   &#229;  &aring; å,V
lowercase a, umlaut &#228;  &auml;  ä,V
lowercase a, tilde  &#227;  &atilde;    ã,V
lowercase a, circumflex accent  &#226;  &acirc; â,V
lowercase a, acute accent   &#225;  &aacute;    á,V
lowercase a, grave accent   &#224;  &agrave;    à,V
lowercase sharps, German    &#223;  &szlig; ß,V
uppercase THORN, Icelandic  &#222;  &THORN; Þ,V
uppercase Y, acute accent   &#221;  &Yacute;    Ý,V
uppercase U, umlaut &#220;  &Uuml;  Ü,V
uppercase U, circumflex accent  &#219;  &Ucirc; Û,V
uppercase U, acute accent   &#218;  &Uacute;    Ú,V
uppercase U, grave accent   &#217;  &Ugrave;    Ù,V
uppercase O, slash  &#216;  &Oslash;    Ø,V
